<launch>
  <arg name="load_params" default="true" />
  <arg name="corrupt_state_estimate" default="true" />
  <arg name="right_image_topic" default="/realsense/rgb/right_image_raw" />
  <arg name="right_info_topic" default="/realsense/rgb/right_image_info" />
  <arg name="left_image_topic" default="/realsense/rgb/left_image_raw" />
  <arg name="left_info_topic" default="/realsense/rgb/left_image_info" />
  <arg name="depth_image_topic" default="/realsense/depth/image" />
  <arg name="depth_info_topic" default="/realsense/depth/camera_info" />

  <include file="$(find simulation)/launch/unity_ros.launch" >
    <arg name="load_params" value="$(arg load_params)" />
    <arg name="right_image_topic" value="$(arg right_image_topic)" />
    <arg name="right_info_topic" value="$(arg right_info_topic)" />
    <arg name="left_image_topic" value="$(arg left_image_topic)" />
    <arg name="left_info_topic" value="$(arg left_info_topic)" />
    <arg name="depth_image_topic" value="$(arg depth_image_topic)" />
    <arg name="depth_info_topic" value="$(arg depth_info_topic)" />
  </include>

  <node name="Simulation" pkg="simulation" type="Car_build.x86_64"/>

  <node pkg="simulation"
        type="state_estimate_corruptor_node"
        name="state_estimate_corruptor"
        output="screen">

    <!-- random-walk drift factor (grows with distance traveled) (sigma / m) -->
    <param if="$(arg corrupt_state_estimate)" name="drift_rw_factor" value="0.03"/>
    <!-- <param if="$(arg corrupt_state_estimate)" name="drift_rw_factor" value="0.00"/> -->
    <param unless="$(arg corrupt_state_estimate)" name="drift_rw_factor" value="0.0"/>

    <!-- independent white noise -->
    <param if="$(arg corrupt_state_estimate)" name="pos_white_sig" value="0.005"/>
    <!-- <param if="$(arg corrupt_state_estimate)" name="pos_white_sig" value="0.000"/>  -->
    <param unless="$(arg corrupt_state_estimate)" name="pos_white_sig" value="0.0"/>

    <!-- average number of seconds between jumps/drift updates -->
    <param if="$(arg corrupt_state_estimate)" name="jump_seconds" value="20.0"/>
    <!-- <param if="$(arg corrupt_state_estimate)" name="jump_seconds" value="-1"/> -->
    <param unless="$(arg corrupt_state_estimate)" name="jump_seconds" value="-1.0"/>
  </node>

  <!-- <node pkg="simulation" type="odom_publish_node" name="odom_publish_node" output="screen"/> -->

  <node name="w_to_unity" pkg="simulation" type="w_to_unity"/>

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="sim_true_body"      args="0 0 0 0 0 0 /OurCar/TrueState /true_body" />

      // add a base_link frame for move_base
  <node pkg="tf2_ros" type="static_transform_publisher"
        name="base_link"      args="0 0 0 1.5707963 0 0 /body /base_link" />
        
  <node pkg="tf2_ros" type="static_transform_publisher"
        name="sim_rgb_camera"      args="0 0 0 0 0 0 /camera /OurCar/RGBCameraLeft " />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="sim_depth_camera"      args="0 0 0 0 0 0 /depth_camera /OurCar/DepthCamera" />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="sim_left_camera"      args="0 0 0 0 0 0 /camera /OurCar/RGBCameraLeft" />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="camera_to_body"      args="0 0 0 0 0 0 /true_body /camera" />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="depth_camera_to_body"      args="0 0 -0.0 -0 0 -1.5707963 /true_body /depth_camera" />

  <node pkg="tf2_ros" type="static_transform_publisher"
        name="depth_camera_frame_to_body"      args="0 0 -0.0 -0 0 -1.5707963 /true_body /OurCar/Sensors/DepthCamera" />

  <include file="$(find perception_pkg)/launch/point_cloud.launch" >
      <arg name="name" value="OurCar" />
  </include>

  <include file="$(find perception_pkg)/launch/octomap.launch">
      <arg name="name" value="OurCar" />
  </include>
  
  <node pkg="perception_pkg" type="trafficlights_detect_node" name="trafficlights_detect_node" output="screen"/>

  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find simulation)/rviz/AutonomousCar.rviz" />

  <include file="$(find auto2dnav)/launch/move_base.launch">
      
  </include>


  <node pkg="controller_pkg" type="controller_node" name="controller_node" output="screen"/>

  <!-- <node pkg="planning" type="sender" name="sender" output="screen"/>

  <node pkg="planning" type="judge" name="judge" output="screen"/> -->
  <include file="$(find planning)/launch/point_setting.launch">
  </include>
 
</launch>
